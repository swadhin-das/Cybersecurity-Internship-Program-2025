const express = require('express');
const bodyParser = require('body-parser');
const { nanoid } = require('nanoid');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const app = express();
const PORT = 3000;

// Middleware
app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.static('public'));
app.set('view engine', 'ejs');

// SQLite DB to disk
const db = new sqlite3.Database('./urls.db');

// Create tables if not exist
db.serialize(() => {
  db.run('CREATE TABLE IF NOT EXISTS urls (id TEXT PRIMARY KEY, longUrl TEXT)');
  db.run(`CREATE TABLE IF NOT EXISTS clicks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    shortId TEXT,
    timestamp TEXT,
    ip TEXT
  )`);
});

// Serve form
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Handle shorten request
app.post('/shorten', (req, res) => {
  const longUrl = req.body.longUrl;

  // Validate URL
  const urlPattern = /^(https?:\/\/)[^\s$.?#].[^\s]*$/gm;
  if (!urlPattern.test(longUrl)) {
    return res.send('❌ Invalid URL format. Must start with http:// or https://');
  }

  const id = nanoid(7); // Unique slug
  db.run('INSERT INTO urls (id, longUrl) VALUES (?, ?)', [id, longUrl], (err) => {
    if (err) return res.send('Error saving to DB');
    res.render('result', { shortUrl: `http://localhost:${PORT}/${id}` });
  });
});

// Handle redirection
app.get('/:id', (req, res) => {
  const id = req.params.id;

  db.get('SELECT longUrl FROM urls WHERE id = ?', [id], (err, row) => {
    if (err || !row) {
      return res.send('URL not found!');
    }

    // Log click
    const timestamp = new Date().toISOString();
    const ip = req.ip;
    db.run('INSERT INTO clicks (shortId, timestamp, ip) VALUES (?, ?, ?)', [id, timestamp, ip]);

    res.redirect(row.longUrl);
  });
});

// Start server
app.listen(PORT, () => {
  console.log(`✅ Server running at http://localhost:${PORT}`);
});
